version: '3.8'

services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT_OUTPORT}"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    restart: always

  postgresql:
    image: postgres:latest
    container_name: postgresql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT_OUTPORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT_OUTPORT}"
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID}
      - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT_OUTPORT}"
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_PORT}
      - ZOOKEEPER_TICK_TIME=${ZOOKEEPER_TICK_TIME}
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    restart: always

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data: